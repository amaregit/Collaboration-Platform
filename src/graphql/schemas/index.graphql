scalar DateTime

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  globalStatus: String!
  createdAt: String!
  updatedAt: String!
}

type Workspace {
  id: ID!
  name: String!
  ownerId: ID!
  createdAt: String!
  updatedAt: String!
  members: [WorkspaceMember!]!
  owner: User!
}

type WorkspaceMember {
  id: ID!
  workspaceId: ID!
  userId: ID!
  role: String!
  joinedAt: String!
  user: User!
}

type Project {
  id: ID!
  name: String!
  description: String
  workspaceId: ID!
  createdAt: String!
  updatedAt: String!
  workspace: Workspace!
  members: [ProjectMembership!]!
}

type ProjectMembership {
  id: ID!
  projectId: ID!
  userId: ID!
  role: String!
  joinedAt: String!
  user: User!
  project: Project!
}

type Task {
  id: ID!
  title: String!
  description: String
  status: String!
  projectId: ID!
  createdById: ID!
  assignedToIds: [ID!]!
  createdAt: String!
  updatedAt: String!
  assignedUsers: [User!]!
  project: Project!
  createdBy: User!
}

type Notification {
  id: ID!
  title: String!
  body: String!
  recipientId: ID!
  status: String!
  relatedEntityId: ID
  createdAt: String!
  recipient: User!
}

type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Query {
  _empty: String
  me: User
  getWorkspace(id: ID!): Workspace
  getWorkspaces: [Workspace!]!
  getAllWorkspaces: [Workspace!]!
  getProject(id: ID!): Project
  getProjects(workspaceId: ID!): [Project!]!
  getTask(id: ID!): Task
  getTasks(projectId: ID!): [Task!]!
  getMyTasks: [Task!]!
  getNotifications: [Notification!]!
  getNotification(id: ID!): Notification
  getUnreadNotificationCount: Int!
  summarizeTask(description: String!): String!
}

type Mutation {
  _empty: String
  register(email: String!, password: String!, firstName: String!, lastName: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  logout: String!
  refreshToken: AuthPayload!
  updatePassword(currentPassword: String!, newPassword: String!): String!
  forgotPassword(email: String!): String!
  userBan(userId: ID!): String!
  userUnban(userId: ID!): String!
  adminResetPassword(userId: ID!): AdminResetPasswordResponse!
  subscribeToPushNotifications(subscription: PushSubscriptionInput!): String!
  unsubscribeFromPushNotifications(endpoint: String!): String!
  createWorkspace(name: String!): Workspace!
  updateWorkspace(id: ID!, name: String!): Workspace!
  deleteWorkspace(id: ID!): String!
  addWorkspaceMember(workspaceId: ID!, userId: ID!, role: String): WorkspaceMember!
  updateWorkspaceMemberRole(workspaceId: ID!, userId: ID!, role: String!): WorkspaceMember!
  removeWorkspaceMember(workspaceId: ID!, userId: ID!): String!
  createProject(workspaceId: ID!, name: String!, description: String): Project!
  updateProject(id: ID!, name: String, description: String): Project!
  deleteProject(id: ID!): String!
  addProjectMember(projectId: ID!, userId: ID!, role: String): ProjectMembership!
  updateProjectMemberRole(projectId: ID!, userId: ID!, role: String!): ProjectMembership!
  removeProjectMember(projectId: ID!, userId: ID!): String!
  createTask(projectId: ID!, title: String!, description: String, assignedToIds: [ID!]): Task!
  updateTask(id: ID!, title: String, description: String, status: String, assignedToIds: [ID!]): Task!
  deleteTask(id: ID!): String!
  updateTaskStatus(id: ID!, status: String!): Task!
  markNotificationAsSeen(id: ID!): Notification
  markAllNotificationsAsSeen: Int!
  generateTasksFromPrompt(projectId: ID!, prompt: String!): [String!]!
}

input PushSubscriptionInput {
  endpoint: String!
  keys: PushSubscriptionKeysInput!
}

input PushSubscriptionKeysInput {
  p256dh: String!
  auth: String!
}

type Subscription {
  _empty: String
  taskStatusUpdated(workspaceId: ID!): Task!
}